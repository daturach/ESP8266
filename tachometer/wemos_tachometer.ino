#include <SPI.h>
#include <Wire.h>
#include <Adafruit_GFX.h>
#include <Adafruit_SSD1306.h>

//#define SCREEN_WIDTH 64
//#define SCREEN_HEIGHT 48
//#define OLED_RESET -1  // Reset pin # (or -1 if sharing Arduino reset pin)

// Declare the display object: does not work with these old libraries!!
//Adafruit_SSD1306 display(SCREEN_WIDTH, SCREEN_HEIGHT, &Wire, OLED_RESET);

// SCL GPIO5 (D1)
// SDA GPIO4 (D2)
// Sensor on D5
#define OLED_RESET 0  // GPIO0
Adafruit_SSD1306 display(OLED_RESET);

/*#define NUMFLAKES 10
#define XPOS 0
#define YPOS 1
#define DELTAY 2*/

/*#define LOGO16_GLCD_HEIGHT 16
#define LOGO16_GLCD_WIDTH  16
static const unsigned char PROGMEM logo16_glcd_bmp[] =
{ B00000000, B11000000,
  B00000001, B11000000,
  B00000001, B11000000,
  B00000011, B11100000,
  B11110011, B11100000,
  B11111110, B11111000,
  B01111110, B11111111,
  B00110011, B10011111,
  B00011111, B11111100,
  B00001101, B01110000,
  B00011011, B10100000,
  B00111111, B11100000,
  B00111111, B11110000,
  B01111100, B11110000,
  B01110000, B01110000,
  B00000000, B00110000 };*/

/*#define LOGO16_GLCD_HEIGHT 16
#define LOGO16_GLCD_WIDTH  21*/
// image 38x49 pixels
const unsigned char daturach [] PROGMEM = {
0xff, 0xff, 0xff, 0xff, 0xfc, 0xff, 0xff, 0xff, 0xff, 0xfc, 0xff, 0xff, 0xff, 0xff, 0xfc, 0xff, 
0xff, 0xff, 0xff, 0xfc, 0xff, 0xff, 0xdf, 0xff, 0xfc, 0xff, 0xfc, 0x01, 0xff, 0xfc, 0xff, 0xf8, 
0x00, 0xff, 0xfc, 0xff, 0xe0, 0x00, 0x3f, 0xfc, 0xff, 0xc0, 0x00, 0x1f, 0xfc, 0xff, 0xc0, 0x00, 
0x0f, 0xfc, 0xff, 0x00, 0x60, 0x07, 0xfc, 0xff, 0x00, 0xff, 0x83, 0xfc, 0xfe, 0x00, 0xff, 0xc1, 
0xfc, 0xfc, 0x00, 0x7f, 0xc1, 0xfc, 0xfc, 0x00, 0x7f, 0xe1, 0xfc, 0xfc, 0x00, 0xff, 0xe1, 0xfc, 
0xfc, 0x00, 0xff, 0xe1, 0xfc, 0xfc, 0x00, 0xff, 0xe1, 0xfc, 0xfc, 0x00, 0xff, 0xe1, 0xfc, 0xfc, 
0x00, 0x80, 0xe1, 0xfc, 0xfc, 0x00, 0x80, 0x65, 0xfc, 0xfc, 0x00, 0xc0, 0x7f, 0xfc, 0xfc, 0x00, 
0xc1, 0xfe, 0xfc, 0xfc, 0x00, 0xe7, 0xfe, 0xfc, 0xfe, 0x00, 0xff, 0xfb, 0xfc, 0xfe, 0x00, 0xff, 
0xff, 0xfc, 0xfe, 0x00, 0xff, 0xfb, 0xfc, 0xfe, 0x01, 0xf7, 0xff, 0xfc, 0xfe, 0x01, 0xff, 0xff, 
0xfc, 0xff, 0x00, 0x83, 0xff, 0xfc, 0xff, 0x00, 0x01, 0xff, 0xfc, 0xff, 0x00, 0x01, 0xff, 0xfc, 
0xff, 0x80, 0x03, 0xff, 0xfc, 0xff, 0x80, 0x0f, 0xef, 0xfc, 0xff, 0xc0, 0x3f, 0xe7, 0xfc, 0xff, 
0xc0, 0x3f, 0xe7, 0xfc, 0xff, 0xe0, 0x7f, 0xe7, 0xfc, 0xff, 0xe0, 0x7f, 0xe7, 0xfc, 0xff, 0x80, 
0x7f, 0xe8, 0xfc, 0xfc, 0x00, 0x7f, 0xe8, 0x3c, 0x00, 0x00, 0x3f, 0xc0, 0x0c, 0x00, 0x00, 0x3f, 
0x80, 0x00, 0x00, 0x00, 0x7f, 0x00, 0x00, 0x00, 0x00, 0x7c, 0x00, 0x00, 0x00, 0x00, 0x78, 0x00, 
0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00
};


#if (SSD1306_LCDHEIGHT != 48)
#error("Height incorrect, please fix Adafruit_SSD1306.h!");
#endif

const int sensorPin = D5;  // IR sensor output pin
volatile unsigned int counter = 0;
//unsigned long lastTime = 0;
unsigned long startTime = 0;
float revsPerSecond = 0;

//void ICACHE_RAM_ATTR countRevolution(); //deprecated

void IRAM_ATTR countRevolution();


void setup() {
  
//  Serial.begin(9600);  // Start serial communication for debugging

// Initialize the OLED display with address 0x3C for 64x48
  display.begin(SSD1306_SWITCHCAPVCC, 0x3C);  // initialize with the I2C addr 0x3C (for the 64x48)

 // Show image buffer on the display hardware.
  // Since the buffer is intialized with an Adafruit splashscreen
  // internally, this will display the splashscreen.
  /*display.display();
  delay(2000);
  //Clear the buffer
  display.clearDisplay();
  display.setTextSize(1);
  display.setTextColor(WHITE);
  display.setCursor(0,0);*/

 display.clearDisplay();
 display.drawBitmap(0, 0, daturach, 38, 49, WHITE);
 display.display();

  pinMode(sensorPin, INPUT);  // Set the IR sensor pin as input
  attachInterrupt(digitalPinToInterrupt(sensorPin), countRevolution, FALLING);
  startTime = millis();
}

void loop() {
  unsigned long currentTime = millis();
  if (currentTime - startTime >= 10000) {  // Update the display every 10 seconds
    revsPerSecond = (float)counter / ((currentTime - startTime)/1000.0);
    display.clearDisplay();
    display.setTextSize(1);  // Set text size to 1 for the smaller display
    display.setTextColor(WHITE);  // Set text color to white
    display.setCursor(0, 0);  // Set cursor to top left corner
    //display.print("Revs/sec:");
    display.setCursor(0, 20);
    display.print(revsPerSecond);
    display.display();  // Display the text on the OLED
    counter = 0;  // Reset the counter
    startTime = currentTime;
  }
}

void countRevolution() {
  counter++;  // Increment the counter on each falling edge detected by the IR sensor
}
